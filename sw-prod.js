(()=>{"use strict";var e={473:()=>{try{self["workbox:core:6.5.2"]&&_()}catch(e){}},168:()=>{try{self["workbox:precaching:6.5.2"]&&_()}catch(e){}},602:()=>{try{self["workbox:routing:6.5.2"]&&_()}catch(e){}},553:()=>{try{self["workbox:strategies:6.5.2"]&&_()}catch(e){}}},t={};function r(a){var s=t[a];if(void 0!==s)return s.exports;var n=t[a]={exports:{}};return e[a](n,n.exports,r),n.exports}(()=>{r(473);const e={"invalid-value":({paramName:e,validValueDescription:t,value:r})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an unexpected value. ${t} Received a value of ${JSON.stringify(r)}.`},"not-an-array":({moduleName:e,className:t,funcName:r,paramName:a})=>{if(!(e&&t&&r&&a))throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${a}' passed into '${e}.${t}.${r}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:r,className:a,funcName:s})=>{if(!(e&&t&&r&&s))throw new Error("Unexpected input to 'incorrect-type' error.");return`The parameter '${t}' passed into '${r}.${a?`${a}.`:""}${s}()' must be of type ${e}.`},"incorrect-class":({expectedClassName:e,paramName:t,moduleName:r,className:a,funcName:s,isReturnValueProblem:n})=>{if(!e||!r||!s)throw new Error("Unexpected input to 'incorrect-class' error.");const o=a?`${a}.`:"";return n?`The return value from '${r}.${o}${s}()' must be an instance of class ${e}.`:`The parameter '${t}' passed into '${r}.${o}${s}()' must be an instance of class ${e}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:r,className:a,funcName:s})=>{if(!(e&&t&&r&&a&&s))throw new Error("Unexpected input to 'missing-a-method' error.");return`${r}.${a}.${s}() expected the '${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(e)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownErrorMessage:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${e}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${e}: '...'}). Received a value of '${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the '${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:r,paramName:a})=>`The supplied '${a}' parameter was an unsupported type. Please check the docs for ${e}.${t}.${r} for valid input types.`,"not-array-of-class":({value:e,expectedClass:t,moduleName:r,className:a,funcName:s,paramName:n})=>`The supplied '${n}' parameter must be an array of '${t}' objects. Received '${JSON.stringify(e)},'. Please check the call to ${r}.${a}.${s}() to fix the issue.`,"max-entries-or-age-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${e}.${t}.${r}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.statuses or config.headersin ${e}.${t}.${r}`,"invalid-string":({moduleName:e,funcName:t,paramName:r})=>{if(!r||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${r}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${e}.${t}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:r})=>`The start (${t}) and end (${r}) values in the Range are not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not defined.`,"no-response":({url:e,error:t})=>{let r=`The strategy could not generate a response for '${e}'.`;return t&&(r+=` The underlying error is ${t}.`),r},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed`+(t?` with an HTTP status of ${t}.`:"."),"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:e})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`,"cross-origin-copy-response":({origin:e})=>`workbox-core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${e}.`,"opaque-streams-source":({type:e})=>{const t=`One of the workbox-streams sources resulted in an '${e}' response.`;return"opaqueredirect"===e?`${t} Please do not use a navigation request that results in a redirect as a source.`:`${t} Please ensure your sources are CORS-enabled.`}};class t extends Error{constructor(t,r){super(((t,r={})=>{const a=e[t];if(!a)throw new Error(`Unable to find message for code '${t}'.`);return a(r)})(t,r)),this.name=t,this.details=r}}const a=(e,r,a)=>{if("function"!=typeof e[r])throw a.expectedMethod=r,new t("missing-a-method",a)},s=(e,r)=>{if(!Array.isArray(e))throw new t("not-an-array",r)},n=(e,r,a)=>{if(!(e instanceof r))throw a.expectedClassName=r.name,new t("incorrect-class",a)},o=(e,r,a)=>{if(!r.includes(e))throw a.validValueDescription=`Valid values are ${JSON.stringify(r)}.`,new t("invalid-value",a)},i=(e,r,a)=>{if(typeof e!==r)throw a.expectedType=r,new t("incorrect-type",a)},c={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},h=e=>[c.prefix,e,c.suffix].filter((e=>e&&e.length>0)).join("-"),l=e=>e||h(c.precache),u=(()=>{"__WB_DISABLE_DEV_LOGS"in self||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},r=function(r,a){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===r&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[r](...a);const s=e?[]:["%cworkbox",[`background: ${t[r]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[r](...s,...a),"groupCollapsed"===r&&(e=!0),"groupEnd"===r&&(e=!1)},a={},s=Object.keys(t);for(const e of s){const t=e;a[t]=(...e)=>{r(t,e)}}return a})();function d(e,t){const r=t();return e.waitUntil(r),r}function p(e){if(!e)throw new t("add-to-cache-list-unexpected-type",{entry:e});if("string"==typeof e){const t=new URL(e,location.href);return{cacheKey:t.href,url:t.href}}const{revision:r,url:a}=e;if(!a)throw new t("add-to-cache-list-unexpected-type",{entry:e});if(!r){const e=new URL(a,location.href);return{cacheKey:e.href,url:e.href}}const s=new URL(a,location.href),n=new URL(a,location.href);return s.searchParams.set("__WB_REVISION__",r),{cacheKey:s.href,url:n.href}}r(168);class g{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:e,state:t})=>{t&&(t.originalRequest=e)},this.cachedResponseWillBeUsed=async({event:e,state:t,cachedResponse:r})=>{if("install"===e.type&&t&&t.originalRequest&&t.originalRequest instanceof Request){const e=t.originalRequest.url;r?this.notUpdatedURLs.push(e):this.updatedURLs.push(e)}return r}}}class f{constructor({precacheController:e}){this.cacheKeyWillBeUsed=async({request:e,params:t})=>{const r=(null==t?void 0:t.cacheKey)||this._precacheController.getCacheKeyForURL(e.url);return r?new Request(r,{headers:e.headers}):e},this._precacheController=e}}function m(e,t){if(0!==t.length){u.groupCollapsed(e);for(const e of t)u.log(e);u.groupEnd()}}let w;const y=e=>new URL(String(e),location.href).href.replace(new RegExp(`^${location.origin}`),"");function b(e,t){const r=new URL(e);for(const e of t)r.searchParams.delete(e);return r.href}class R{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}}const v=new Set;function N(e){return"string"==typeof e?new Request(e):e}r(553);class ${constructor(e,t){this._cacheKeys={},n(t.event,ExtendableEvent,{moduleName:"workbox-strategies",className:"StrategyHandler",funcName:"constructor",paramName:"options.event"}),Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new R,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const e of this._plugins)this._pluginStateMap.set(e,{});this.event.waitUntil(this._handlerDeferred.promise)}async fetch(e){const{event:r}=this;let a=N(e);if("navigate"===a.mode&&r instanceof FetchEvent&&r.preloadResponse){const e=await r.preloadResponse;if(e)return u.log(`Using a preloaded navigation response for '${y(a.url)}'`),e}const s=this.hasCallback("fetchDidFail")?a.clone():null;try{for(const e of this.iterateCallbacks("requestWillFetch"))a=await e({request:a.clone(),event:r})}catch(e){if(e instanceof Error)throw new t("plugin-error-request-will-fetch",{thrownErrorMessage:e.message})}const n=a.clone();try{let e;e=await fetch(a,"navigate"===a.mode?void 0:this._strategy.fetchOptions),u.debug(`Network request for '${y(a.url)}' returned a response with status '${e.status}'.`);for(const t of this.iterateCallbacks("fetchDidSucceed"))e=await t({event:r,request:n,response:e});return e}catch(e){throw u.log(`Network request for '${y(a.url)}' threw an error.`,e),s&&await this.runCallbacks("fetchDidFail",{error:e,event:r,originalRequest:s.clone(),request:n.clone()}),e}}async fetchAndCachePut(e){const t=await this.fetch(e),r=t.clone();return this.waitUntil(this.cachePut(e,r)),t}async cacheMatch(e){const t=N(e);let r;const{cacheName:a,matchOptions:s}=this._strategy,n=await this.getCacheKey(t,"read"),o=Object.assign(Object.assign({},s),{cacheName:a});r=await caches.match(n,o),r?u.debug(`Found a cached response in '${a}'.`):u.debug(`No cached response found in '${a}'.`);for(const e of this.iterateCallbacks("cachedResponseWillBeUsed"))r=await e({cacheName:a,matchOptions:s,cachedResponse:r,request:n,event:this.event})||void 0;return r}async cachePut(e,r){const a=N(e);await(0,new Promise((e=>setTimeout(e,0))));const s=await this.getCacheKey(a,"write");{if(s.method&&"GET"!==s.method)throw new t("attempt-to-cache-non-get-request",{url:y(s.url),method:s.method});const e=r.headers.get("Vary");e&&u.debug(`The response for ${y(s.url)} has a 'Vary: ${e}' header. Consider setting the {ignoreVary: true} option on your strategy to ensure cache matching and deletion works as expected.`)}if(!r)throw u.error(`Cannot cache non-existent response for '${y(s.url)}'.`),new t("cache-put-with-no-response",{url:y(s.url)});const n=await this._ensureResponseSafeToCache(r);if(!n)return u.debug(`Response '${y(s.url)}' will not be cached.`,n),!1;const{cacheName:o,matchOptions:i}=this._strategy,c=await self.caches.open(o),h=this.hasCallback("cacheDidUpdate"),l=h?await async function(e,t,r,a){const s=b(t.url,r);if(t.url===s)return e.match(t,a);const n=Object.assign(Object.assign({},a),{ignoreSearch:!0}),o=await e.keys(t,n);for(const t of o)if(s===b(t.url,r))return e.match(t,a)}(c,s.clone(),["__WB_REVISION__"],i):null;u.debug(`Updating the '${o}' cache with a new Response for ${y(s.url)}.`);try{await c.put(s,h?n.clone():n)}catch(e){if(e instanceof Error)throw"QuotaExceededError"===e.name&&await async function(){u.log(`About to run ${v.size} callbacks to clean up caches.`);for(const e of v)await e(),u.log(e,"is complete.");u.log("Finished running callbacks.")}(),e}for(const e of this.iterateCallbacks("cacheDidUpdate"))await e({cacheName:o,oldResponse:l,newResponse:n.clone(),request:s,event:this.event});return!0}async getCacheKey(e,t){const r=`${e.url} | ${t}`;if(!this._cacheKeys[r]){let a=e;for(const e of this.iterateCallbacks("cacheKeyWillBeUsed"))a=N(await e({mode:t,request:a,event:this.event,params:this.params}));this._cacheKeys[r]=a}return this._cacheKeys[r]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const r of this.iterateCallbacks(e))await r(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if("function"==typeof t[e]){const r=this._pluginStateMap.get(t),a=a=>{const s=Object.assign(Object.assign({},a),{state:r});return t[e](s)};yield a}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve(null)}async _ensureResponseSafeToCache(e){let t=e,r=!1;for(const e of this.iterateCallbacks("cacheWillUpdate"))if(t=await e({request:this.request,response:t,event:this.event})||void 0,r=!0,!t)break;return r||(t&&200!==t.status&&(t=void 0),t&&200!==t.status&&(0===t.status?u.warn(`The response for '${this.request.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`):u.debug(`The response for '${this.request.url}' returned a status code of '${e.status}' and won't be cached as a result.`))),t}}class _ extends class{constructor(e={}){this.cacheName=e.cacheName||h(c.runtime),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,r="string"==typeof e.request?new Request(e.request):e.request,a="params"in e?e.params:void 0,s=new $(this,{event:t,request:r,params:a}),n=this._getResponse(s,r,t);return[n,this._awaitComplete(n,s,r,t)]}async _getResponse(e,r,a){let s;await e.runCallbacks("handlerWillStart",{event:a,request:r});try{if(s=await this._handle(r,e),!s||"error"===s.type)throw new t("no-response",{url:r.url})}catch(t){if(t instanceof Error)for(const n of e.iterateCallbacks("handlerDidError"))if(s=await n({error:t,event:a,request:r}),s)break;if(!s)throw t;u.log(`While responding to '${y(r.url)}', an ${t instanceof Error?t.toString():""} error occurred. Using a fallback response provided by a handlerDidError plugin.`)}for(const t of e.iterateCallbacks("handlerWillRespond"))s=await t({event:a,request:r,response:s});return s}async _awaitComplete(e,t,r,a){let s,n;try{s=await e}catch(n){}try{await t.runCallbacks("handlerDidRespond",{event:a,request:r,response:s}),await t.doneWaiting()}catch(e){e instanceof Error&&(n=e)}if(await t.runCallbacks("handlerDidComplete",{event:a,request:r,response:s,error:n}),t.destroy(),n)throw n}}{constructor(e={}){e.cacheName=l(e.cacheName),super(e),this._fallbackToNetwork=!1!==e.fallbackToNetwork,this.plugins.push(_.copyRedirectedCacheableResponsesPlugin)}async _handle(e,t){return await t.cacheMatch(e)||(t.event&&"install"===t.event.type?await this._handleInstall(e,t):await this._handleFetch(e,t))}async _handleFetch(e,r){let a;const s=r.params||{};if(!this._fallbackToNetwork)throw new t("missing-precache-entry",{cacheName:this.cacheName,url:e.url});{u.warn(`The precached response for ${y(e.url)} in ${this.cacheName} was not found. Falling back to the network.`);const t=s.integrity,n=e.integrity,o=!n||n===t;a=await r.fetch(new Request(e,{integrity:n||t})),t&&o&&(this._useDefaultCacheabilityPluginIfNeeded(),await r.cachePut(e,a.clone())&&u.log(`A response for ${y(e.url)} was used to "repair" the precache.`))}{const t=s.cacheKey||await r.getCacheKey(e,"read");u.groupCollapsed("Precaching is responding to: "+y(e.url)),u.log(`Serving the precached url: ${y(t instanceof Request?t.url:t)}`),u.groupCollapsed("View request details here."),u.log(e),u.groupEnd(),u.groupCollapsed("View response details here."),u.log(a),u.groupEnd(),u.groupEnd()}return a}async _handleInstall(e,r){this._useDefaultCacheabilityPluginIfNeeded();const a=await r.fetch(e);if(!await r.cachePut(e,a.clone()))throw new t("bad-precaching-response",{url:e.url,status:a.status});return a}_useDefaultCacheabilityPluginIfNeeded(){let e=null,t=0;for(const[r,a]of this.plugins.entries())a!==_.copyRedirectedCacheableResponsesPlugin&&(a===_.defaultPrecacheCacheabilityPlugin&&(e=r),a.cacheWillUpdate&&t++);0===t?this.plugins.push(_.defaultPrecacheCacheabilityPlugin):t>1&&null!==e&&this.plugins.splice(e,1)}}_.defaultPrecacheCacheabilityPlugin={cacheWillUpdate:async({response:e})=>!e||e.status>=400?null:e},_.copyRedirectedCacheableResponsesPlugin={cacheWillUpdate:async({response:e})=>e.redirected?await async function(e,r){let a=null;if(e.url&&(a=new URL(e.url).origin),a!==self.location.origin)throw new t("cross-origin-copy-response",{origin:a});const s=e.clone(),n={headers:new Headers(s.headers),status:s.status,statusText:s.statusText},o=r?r(n):n,i=function(){if(void 0===w){const e=new Response("");if("body"in e)try{new Response(e.body),w=!0}catch(e){w=!1}w=!1}return w}()?s.body:await s.blob();return new Response(i,o)}(e):e};class x{constructor({cacheName:e,plugins:t=[],fallbackToNetwork:r=!0}={}){this._urlsToCacheKeys=new Map,this._urlsToCacheModes=new Map,this._cacheKeysToIntegrities=new Map,this._strategy=new _({cacheName:l(e),plugins:[...t,new f({precacheController:this})],fallbackToNetwork:r}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this._strategy}precache(e){this.addToCacheList(e),this._installAndActiveListenersAdded||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this._installAndActiveListenersAdded=!0)}addToCacheList(e){s(e,{moduleName:"workbox-precaching",className:"PrecacheController",funcName:"addToCacheList",paramName:"entries"});const r=[];for(const a of e){"string"==typeof a?r.push(a):a&&void 0===a.revision&&r.push(a.url);const{cacheKey:e,url:s}=p(a),n="string"!=typeof a&&a.revision?"reload":"default";if(this._urlsToCacheKeys.has(s)&&this._urlsToCacheKeys.get(s)!==e)throw new t("add-to-cache-list-conflicting-entries",{firstEntry:this._urlsToCacheKeys.get(s),secondEntry:e});if("string"!=typeof a&&a.integrity){if(this._cacheKeysToIntegrities.has(e)&&this._cacheKeysToIntegrities.get(e)!==a.integrity)throw new t("add-to-cache-list-conflicting-integrities",{url:s});this._cacheKeysToIntegrities.set(e,a.integrity)}if(this._urlsToCacheKeys.set(s,e),this._urlsToCacheModes.set(s,n),r.length>0){const e=`Workbox is precaching URLs without revision info: ${r.join(", ")}\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;u.warn(e)}}}install(e){return d(e,(async()=>{const t=new g;this.strategy.plugins.push(t);for(const[t,r]of this._urlsToCacheKeys){const a=this._cacheKeysToIntegrities.get(r),s=this._urlsToCacheModes.get(t),n=new Request(t,{integrity:a,cache:s,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:r},request:n,event:e}))}const{updatedURLs:r,notUpdatedURLs:a}=t;return function(e,t){const r=e.length,a=t.length;if(r||a){let s=`Precaching ${r} file${1===r?"":"s"}.`;a>0&&(s+=` ${a} file${1===a?" is":"s are"} already cached.`),u.groupCollapsed(s),m("View newly precached URLs.",e),m("View previously precached URLs.",t),u.groupEnd()}}(r,a),{updatedURLs:r,notUpdatedURLs:a}}))}activate(e){return d(e,(async()=>{const e=await self.caches.open(this.strategy.cacheName),t=await e.keys(),r=new Set(this._urlsToCacheKeys.values()),a=[];for(const s of t)r.has(s.url)||(await e.delete(s),a.push(s.url));return function(e){const t=e.length;t>0&&(u.groupCollapsed(`During precaching cleanup, ${t} cached request${1===t?" was":"s were"} deleted.`),((e,t)=>{u.groupCollapsed("Deleted Cache Requests");for(const e of t)u.log(e);u.groupEnd()})(0,e),u.groupEnd())}(a),{deletedURLs:a}}))}getURLsToCacheKeys(){return this._urlsToCacheKeys}getCachedURLs(){return[...this._urlsToCacheKeys.keys()]}getCacheKeyForURL(e){const t=new URL(e,location.href);return this._urlsToCacheKeys.get(t.href)}getIntegrityForCacheKey(e){return this._cacheKeysToIntegrities.get(e)}async matchPrecache(e){const t=e instanceof Request?e.url:e,r=this.getCacheKeyForURL(t);if(r)return(await self.caches.open(this.strategy.cacheName)).match(r)}createHandlerBoundToURL(e){const r=this.getCacheKeyForURL(e);if(!r)throw new t("non-precached-url",{url:e});return t=>(t.request=new Request(e),t.params=Object.assign({cacheKey:r},t.params),this.strategy.handle(t))}}let C;const T=()=>(C||(C=new x),C);r(602);const k=["DELETE","GET","HEAD","PATCH","POST","PUT"],q=e=>e&&"object"==typeof e?(a(e,"handle",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),e):(i(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),{handle:e});class E{constructor(e,t,r="GET"){i(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"match"}),r&&o(r,k,{paramName:"method"}),this.handler=q(t),this.match=e,this.method=r}setCatchHandler(e){this.catchHandler=q(e)}}class U extends E{constructor(e,t,r){n(e,RegExp,{moduleName:"workbox-routing",className:"RegExpRoute",funcName:"constructor",paramName:"pattern"}),super((({url:t})=>{const r=e.exec(t.href);if(r){if(t.origin===location.origin||0===r.index)return r.slice(1);u.debug(`The regular expression '${e.toString()}' only partially matched against the cross-origin URL '${t.toString()}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`)}}),t,r)}}class L{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",(e=>{const{request:t}=e,r=this.handleRequest({request:t,event:e});r&&e.respondWith(r)}))}addCacheListener(){self.addEventListener("message",(e=>{if(e.data&&"CACHE_URLS"===e.data.type){const{payload:t}=e.data;u.debug("Caching URLs from the window",t.urlsToCache);const r=Promise.all(t.urlsToCache.map((t=>{"string"==typeof t&&(t=[t]);const r=new Request(...t);return this.handleRequest({request:r,event:e})})));e.waitUntil(r),e.ports&&e.ports[0]&&r.then((()=>e.ports[0].postMessage(!0)))}}))}handleRequest({request:e,event:t}){n(e,Request,{moduleName:"workbox-routing",className:"Router",funcName:"handleRequest",paramName:"options.request"});const r=new URL(e.url,location.href);if(!r.protocol.startsWith("http"))return void u.debug("Workbox Router only supports URLs that start with 'http'.");const a=r.origin===location.origin,{params:s,route:o}=this.findMatchingRoute({event:t,request:e,sameOrigin:a,url:r});let i=o&&o.handler;const c=[];i&&(c.push(["Found a route to handle this request:",o]),s&&c.push(["Passing the following params to the route's handler:",s]));const h=e.method;if(!i&&this._defaultHandlerMap.has(h)&&(c.push(`Failed to find a matching route. Falling back to the default handler for ${h}.`),i=this._defaultHandlerMap.get(h)),!i)return void u.debug(`No route found for: ${y(r)}`);let l;u.groupCollapsed(`Router is responding to: ${y(r)}`),c.forEach((e=>{Array.isArray(e)?u.log(...e):u.log(e)})),u.groupEnd();try{l=i.handle({url:r,request:e,event:t,params:s})}catch(e){l=Promise.reject(e)}const d=o&&o.catchHandler;return l instanceof Promise&&(this._catchHandler||d)&&(l=l.catch((async a=>{if(d){u.groupCollapsed(`Error thrown when responding to:  ${y(r)}. Falling back to route's Catch Handler.`),u.error("Error thrown by:",o),u.error(a),u.groupEnd();try{return await d.handle({url:r,request:e,event:t,params:s})}catch(e){e instanceof Error&&(a=e)}}if(this._catchHandler)return u.groupCollapsed(`Error thrown when responding to:  ${y(r)}. Falling back to global Catch Handler.`),u.error("Error thrown by:",o),u.error(a),u.groupEnd(),this._catchHandler.handle({url:r,request:e,event:t});throw a}))),l}findMatchingRoute({url:e,sameOrigin:t,request:r,event:a}){const s=this._routes.get(r.method)||[];for(const n of s){let s;const o=n.match({url:e,sameOrigin:t,request:r,event:a});if(o)return o instanceof Promise&&u.warn(`While routing ${y(e)}, an async matchCallback function was used. Please convert the following route to use a synchronous matchCallback function:`,n),s=o,(Array.isArray(s)&&0===s.length||o.constructor===Object&&0===Object.keys(o).length||"boolean"==typeof o)&&(s=void 0),{route:n,params:s}}return{}}setDefaultHandler(e,t="GET"){this._defaultHandlerMap.set(t,q(e))}setCatchHandler(e){this._catchHandler=q(e)}registerRoute(e){i(e,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),a(e,"match",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),i(e.handler,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),a(e.handler,"handle",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.handler"}),i(e.method,"string",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.method"}),this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new t("unregister-route-but-not-found-with-method",{method:e.method});const r=this._routes.get(e.method).indexOf(e);if(!(r>-1))throw new t("unregister-route-route-not-registered");this._routes.get(e.method).splice(r,1)}}let P;class K extends E{constructor(e,t){super((({request:r})=>{const a=e.getURLsToCacheKeys();for(const s of function*(e,{ignoreURLParametersMatching:t=[/^utm_/,/^fbclid$/],directoryIndex:r="index.html",cleanURLs:a=!0,urlManipulation:s}={}){const n=new URL(e,location.href);n.hash="",yield n.href;const o=function(e,t=[]){for(const r of[...e.searchParams.keys()])t.some((e=>e.test(r)))&&e.searchParams.delete(r);return e}(n,t);if(yield o.href,r&&o.pathname.endsWith("/")){const e=new URL(o.href);e.pathname+=r,yield e.href}if(a){const e=new URL(o.href);e.pathname+=".html",yield e.href}if(s){const e=s({url:n});for(const t of e)yield t.href}}(r.url,t)){const t=a.get(s);if(t)return{cacheKey:t,integrity:e.getIntegrityForCacheKey(t)}}u.debug("Precaching did not find a match for "+y(r.url))}),e.strategy)}}var S;S=[{'revision':'ed519aa16ba78ac1ff3ba6f2227da10d','url':'app.js'},{'revision':'f31b531104785b0df0932b75e682e259','url':'vendor.js'},{'revision':'e7b46ef12720021519ebd0d16af83066','url':'vendor.js.LICENSE.txt'}],T().precache(S),function(e){const r=T();!function(e,r,a){let s;if("string"==typeof e){const n=new URL(e,location.href);{if(!e.startsWith("/")&&!e.startsWith("http"))throw new t("invalid-string",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});const r=e.startsWith("http")?n.pathname:e,a="[*:?+]";new RegExp(`${a}`).exec(r)&&u.debug(`The '$capture' parameter contains an Express-style wildcard character (${a}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`)}s=new E((({url:t})=>(t.pathname===n.pathname&&t.origin!==n.origin&&u.debug(`${e} only partially matches the cross-origin URL ${t.toString()}. This route will only handle cross-origin requests if they match the entire URL.`),t.href===n.href)),r,a)}else if(e instanceof RegExp)s=new U(e,r,a);else if("function"==typeof e)s=new E(e,r,a);else{if(!(e instanceof E))throw new t("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});s=e}(P||(P=new L,P.addFetchListener(),P.addCacheListener()),P).registerRoute(s)}(new K(r,e))}(undefined),importScripts("https://storage.googleapis.com/workbox-cdn/releases/3.3.1/workbox-sw.js"),workbox.precaching.precacheAndRoute([]),workbox.routing.registerRoute(new RegExp("https://(?:fonts|www).(?:googleapis|gstatic).com/(.*)"),workbox.strategies.cacheFirst({cacheName:"google-fonts",plugins:[new workbox.expiration.Plugin({maxEntries:20,purgeOnQuotaError:!0}),new workbox.cacheableResponse.Plugin({statuses:[0,200]})]})),workbox.googleAnalytics.initialize()})()})();